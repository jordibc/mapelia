#!/usr/bin/env python3

"""
Crea un fichero de polígonos (.ply o .stl) a partir de uno con sólo los puntos
(.asc).

El fichero asc original debe tener los puntos en orden correspondiente a las
secciones de un objeto casi-esférico.
"""

import sys
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter as fmt

import maps
try:
    import projections
except ImportError:
    sys.exit('projections module not ready. You may want to first run:\n'
             '  python3 setup.py build_ext --inplace')
import formats
import asc


def main():
    parser = ArgumentParser(description=__doc__, formatter_class=fmt)
    add = parser.add_argument  # shortcut
    add('file', help='fichero asc con las coordenadas de los puntos')
    add('-o', '--output', default='',
        help='fichero de salida (si vacío, se genera a partir del de entrada)')
    add('--overwrite', action='store_true',
        help='no comprobar si el fichero de salida existe')
    add('--type', choices=['ply', 'stl'], default='ply',
        help='tipo de fichero a generar')
    add('--ascii', action='store_true',
        help='escribe el ply resultante en ascii')
    add('--invert', action='store_true',
        help='invierte la orientación de las caras')
    add('--row-length', type=int, default=0,
        help='número de puntos por sección (si 0, se autodetecta)')
    args = parser.parse_args()

    output = args.output or '%s.%s' % (args.file.rsplit('.', 1)[0], args.type)
    if not args.overwrite:
        maps.check_if_exists(output)

    print(maps.green('Processing file %s ...' % args.file))
    points_raw = asc.get_points_raw(args.file)
    points = asc.get_points(points_raw, args.row_length)
    faces = projections.get_faces(points)

    if args.type == 'ply':
        with open(output, 'wb') as fout:
            binary = not args.ascii
            fout.write(formats.ply_header(nvertices=len(points_raw),
                                          nfaces=len(faces), binary=binary))
            formats.write_vertices(fout, points, binary)
            formats.write_faces(fout, faces, binary, args.invert)
    elif args.type == 'stl':
        patches = [(points, faces)]
        formats.write_stl(output, patches, args.invert)
    print('The output is in file %s' % output)



if __name__ == '__main__':
    main()
