#!/usr/bin/env python3

"""
Divide en dos mitades un fichero stl.

La idea es ayudar a post-procesar ficheros stl hechos con mapelia, para
que se puedan imprimir más fácilmente. El fichero original no se modifica,
sino que se crean dos nuevos ficheros acabados en "_N.stl" y "_S.stl".
"""

import sys
import os
import struct

from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter as fmt

from maps import check_if_exists

red = lambda txt: '\x1b[31m%s\x1b[0m' % txt


def main():
    parser = ArgumentParser(description=__doc__, formatter_class=fmt)
    add = parser.add_argument  # shortcut
    add('file', help='fichero stl')
    add('-n', '--name', default='',
        help='nombre de salida (si vacío, se genera a partir del de entrada)')
    add('--overwrite', action='store_true',
        help='no comprobar si los ficheros de salida existen')
    add('--ignore-check', action='store_true',
        help='forzar el procesado del fichero aunque no parezca un stl')
    args = parser.parse_args()

    if not os.path.isfile(args.file):
        sys.exit('File %s does not exist.' % args.file)

    if not valid_stl(args.file):
        if args.ignore_check:
            print('Going ahead anyway as you used --ignore-check ...')
        else:
            sys.exit('Cancelling (use --ignore-check to force processing it).')

    name = args.name or args.file.rsplit('.', 1)[0]
    output_N = '%s_N.stl' % name
    output_S = '%s_S.stl' % name
    if not args.overwrite:
        check_if_exists(output_N)
        check_if_exists(output_S)

    print('Processing file %s ...' % args.file)
    with open(args.file, 'rb') as fin:
        fin.read(84)  # discard header + number of triangles
        size_triangle = 12 * 4 + 2  # 12 floats and 2 dummy bytes

        # North hemisphere.
        triangles = []
        while True:
            data = fin.read(size_triangle)
            if not data:
                sys.exit('Could not cut the figure in half.')
            v1_z = struct.unpack('<f', data[20:24])[0]
            if v1_z < 0:  # z component of the 1st vertex
                break
            triangles.append(data)
        write_stl(output_N, triangles)

        # South hemisphere.
        triangles = [data]  # include the first triangle
        while True:
            data = fin.read(size_triangle)
            if not data:
                break
            triangles.append(data)
        write_stl(output_S, triangles)


def write_stl(fname, triangles):
    "Write binary-encoded list of triangles as a stl file"
    print('Writing file %s ...' % fname)
    with open(fname, 'wb') as fout:
        fout.write(b'\0' * 80)  # header (empty)
        fout.write(struct.pack('<I', len(triangles)))  # number of triangles
        for t in triangles:
            fout.write(t)


def valid_stl(fname):
    "Return True if file looks like an stl, warn and return False otherwise"
    if not fname.endswith('.stl'):  # soft warning
        print(red('File %s does not end in ".stl". Is it really an stl file?' %
                  fname))

    ntriangles = struct.unpack('<I', open(fname, 'rb').read(84)[-4:])[0]
    size_content = os.path.getsize(fname) - 84
    size_triangle = (1 * 3 + 3 * 3) * 4 + 2  # 4 bytes per float
    # 1 normal vector, 3 vertices (with 3 components each), 2 dummy bytes
    if size_content / size_triangle == ntriangles:
        return True
    else:
        print(red('File %s does not look like an stl file:\n'
                  '  It declares to have %d triangles but has capacity for %g.'
                  % (fname, ntriangles, size_content / size_triangle)))
        return False



if __name__ == '__main__':
    main()
